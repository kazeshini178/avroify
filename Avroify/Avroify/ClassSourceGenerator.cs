using System;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Avroify;

[Generator]
public class ClassSourceGenerator : IIncrementalGenerator
{
    private readonly bool _isTestContext;
    private readonly SchemaBuilder _schemaBuilder = new();

    // TODO: Split to descriptor class
    private static readonly DiagnosticDescriptor Descriptor = new("A00001", "Generation Failure",
        "Failed to Generate file {Name} , Error: {ErrorMessage}",
        string.Empty, DiagnosticSeverity.Warning, true);

    // Only used in tests, Attributes project has "real" attribute
    private const string AttributeSourceCode = @"// <auto-generated/>
using System;

namespace Avroify
{
    [AttributeUsage(System.AttributeTargets.Class)]
    public class AvroifyAttribute : Attribute
    {
    }
}";

    public ClassSourceGenerator() { }
    // Dont really like this but couldnt figure out why test wouldnt use marker attribute
    public ClassSourceGenerator(bool isTestContext)
    {
        _isTestContext = isTestContext;
    }

    public void Initialize(IncrementalGeneratorInitializationContext context)
    { 
        if(_isTestContext)
        {
            context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
                "AvroifyAttribute.g.cs",
                SourceText.From(AttributeSourceCode, Encoding.UTF8)));
        }
        
        var attributeGeneration = context.SyntaxProvider.ForAttributeWithMetadataName(
                "Avroify.AvroifyAttribute",
                (node, _) => node is ClassDeclarationSyntax,
                CreateAvroDetails
            )
            .Where(c => c is not null)
            .WithTrackingName("AvroPartialGenerator");


        context.RegisterSourceOutput(attributeGeneration, (productionContext, s) =>
        {
            if (s is null) return;
            try
            {
                var file = CreateAvroRecordPartial(s.Value);
                productionContext.AddSource($"{s.Value.Name}.g.cs", file);
            }
            catch (Exception e)
            {
                productionContext.ReportDiagnostic(
                    Diagnostic.Create(Descriptor, null, s.Value.Name, e.Message));
            }
        });
    }

    private SourceText CreateAvroRecordPartial(AvroRecordDetails details)
    {
        var fileTemplate = @$"// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by Avroify
//    Changes to this file will be lost when code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using global::Avro;
using global::Avro.Specific;

namespace {details.Namespace};

[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Avroify"", ""1.0.0"")]
public partial class {details.Name} : global::Avro.Specific.ISpecificRecord
{{
	public static global::Avro.Schema _SCHEMA = global::Avro.Schema.Parse(""{details.Schema}"");
    public virtual global::Avro.Schema Schema
	{{
		get
		{{
			return {details.Name}._SCHEMA;
		}}
	}}

    public virtual object Get(int fieldPos)
	{{
		switch (fieldPos)
		{{
{details.Getters}
			default: throw new global::Avro.AvroRuntimeException(""Bad index "" + fieldPos + "" in Get()"");
		}}
	}}

	public virtual void Put(int fieldPos, object fieldValue)
	{{
		switch (fieldPos)
		{{
{details.Setters}
			default: throw new global::Avro.AvroRuntimeException(""Bad index "" + fieldPos + "" in Put()"");
		}}
	}}
}}
";

        return SourceText.From(fileTemplate, Encoding.UTF8);
    }

    private AvroRecordDetails? CreateAvroDetails(GeneratorAttributeSyntaxContext ctx, CancellationToken token)
    {
        // Symbols allow us to get the compile-time information.
        if (ctx.SemanticModel.GetDeclaredSymbol(ctx.TargetNode) is not INamedTypeSymbol classSymbol)
            return null;

        var @namespace = classSymbol.ContainingNamespace.ToDisplayString();
        var className = classSymbol.Name;

        var getStringBuilder = new StringBuilder();
        var setStringBuilder = new StringBuilder();
        var properties = Util.GetSettableProperties(classSymbol);
        for (var index = 0; index < properties.Count; index++)
        {
            var property = properties[index];
            getStringBuilder.AppendLine($"\t\t\tcase {index}: return this.{property.Name};");
            setStringBuilder.AppendLine(
                $"\t\t\tcase {index}: this.{property.Name} = ({property.SetMethod!.Parameters[0].Type.ToDisplayString()})fieldValue; break;");
        }

        var schema = _schemaBuilder.GenerateSchemaForClass(classSymbol, properties, token);

        return new AvroRecordDetails(@namespace, className, schema.ToString().Replace("\"", "\\\""),
            setStringBuilder.ToString(), getStringBuilder.ToString());
    }
}